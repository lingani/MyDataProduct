abline(model2, lty = "dotted")
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
plot(x, y, xlim=c(0,1), ylim=c(0, 1.5))
model <- lm(y ~ x)
model
summary(model)
abline(model)
model2 = lm(y ~ 0 + x)
summary(model2)
abline(model2, lty = "dotted")
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
model<-lm(y, x)
summary(model)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
model<-lm(y, x)
summary(model)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
model<-lm(y ~ x)
summary(model)
summary(model)$sigma
data(mtcars)
model<-lm(mtcars$mpg ~ mtcars$wt)
summary(model)
mean(mtcars$mpg)
20.09062-1.4096
20.09062-2.3647
data(mtcars)
model<-lm(mtcars$mpg ~ mtcars$wt)
mean(mtcars$mpg)
sumCoef<-summary(model)$coefficients
sumCoef[1,1]+c(-1,1)*qt(.975, df=model$df)*sumCoef[1,2]
data(mtcars)
model<-lm(mtcars$mpg ~ (mtcars$wt - mean(mtcars$wt)))
sumCoef<-summary(model)$coefficients
sumCoef[1,1]+c(-1,1)*qt(.975, df=model$df)*sumCoef[1,2]
mtcars$wt
mean(mtcars$wt)
mean(mtcars$wt) - 1
mtcars$wt-1
mtcars$wt - mean(mtcars$wt)
model<-lm(mtcars$mpg ~ mtcars$wt - mean(mtcars$wt))
x<-mtcars$wt - mean(mtcars$wt)
model<-lm(mtcars$mpg ~ x)
sumCoef<-summary(model)$coefficients
sumCoef[1,1]+c(-1,1)*qt(.975, df=model$df)*sumCoef[1,2]
help(mtcars)
sumCoef<-summary(model)$coefficients
sumCoef[1,1]+c(-1,1)*qt(.975, df=model$df)*sumCoef[1,2]
data(mtcars)
x<-mtcars$wt - mean(mtcars$wt)
model<-lm(mtcars$mpg ~ x)
sumCoef<-summary(model)$coefficients
sumCoef[1,1]+c(-1,1)*qt(.975, df=model$df)*sumCoef[1,2]
sumCoef
summary(model)
data(mtcars)
x<-mtcars$wt
y<-mtcars$mpg
model<-lm(y ~ x)
sumCoef<-summary(model)$coefficients
sumCoef[1,1]+c(-1,1)*qt(.975, df=model$df)*sumCoef[1,2]
plot(x, y)
model
summary(model)
abline(model)
-5.3445*3+37.2851
-5.3445*3+37.2851 + 0.5(-33.45050 + 41.11975)
-5.3445*3+37.2851 + 0.5*(-33.45050 + 41.11975)
sumCoef[1,1]+c(-1,1)*qt(.975, df=model$df)*sumCoef[1,2]
21.2516+2*3.046
data(mtcars)
x<-mtcars$wt
y<-mtcars$mpg
model<-lm(y ~ x)
sumCoef<-summary(model)$coefficients
sumCoef[2,1]+c(-1,1)*qt(.975, df=model$df)*sumCoef[2,2]
data(mtcars)
x<-mtcars$wt - mean(mtcars$wt)
model<-lm(mtcars$mpg ~ x)
sumCoef<-summary(model)$coefficients
sumCoef[1,1]+c(-1,1)*qt(.975, df=model$df)*sumCoef[1,2]
sumCoef[1,1]
summary(model)$coefficients
sumCoef[1,2]
sumCoef[1,1]+ 3 * sumCoef[2,1]
sumCoef[1,1] + 3 * sumCoef[2,1]
sumCoef[1,1]+c(-1,1)*qt(.975, df=model$df)*sumCoef[1,2]
data(mtcars)
x<-mtcars$wt
y<-mtcars$mpg
model<-lm(y ~ x)
sumCoef<-summary(model)$coefficients
sumCoef[1,1]+c(-1,1)*qt(.975, df=model$df)*sumCoef[1,2]
sumCoef[1,1] + 3 * sumCoef[2,1]
(-33.45050 + 41.11975)/2 + 21.25171
sumCoef
(sumCoef[1,1] + 0.5*sumCoef[1,1]) + 3 * (sumCoef[2,1] + 0.5*0.559101)
(sumCoef[1,1] + 0.5*sumCoef[1,2]) + 3 * (sumCoef[2,1] + 0.5*sumCoef[2,2])
sumCoef[1,1]+c(-1,1)*qt(.975, df=model$df)*sumCoef[1,2]
sumCoef[1,1] + 3 * sumCoef[2,1]
21.25171 + 1.877627
21.25171 + 1.877627*0.5
data(mtcars)
x<-mtcars$wt
y<-mtcars$mpg
model<-lm(y ~ x)
xVals <- seq(min(x), max(x), by=1)
yVals <- sumCoef[1,1] + xVals * sumCoef[2,1]
newdata <- data.frame(x=xVals)
p1 <- predict(model, newdata, interval = ("confidence"))
p2 <- predict(model, newdata, interval = ("prediction"))
plot(x,y)
abline(model, lwd = 2)
line(xVals, p1[,2]); lines(xVals, p1[,3])
devoff()
dev.off()
plot(x,y)
abline(model, lwd = 2)
line(xVals, p1[,2])
lines(xVals, p1[,2])
lines(xVals, p1[,3])
lines(xVals, p2[,2]); lines(xVals, p2[,3])
cov(y, x)
cov(y, x)/var(x)
cov(y, x)/var(y)
data(mtcars)
x<-mtcars$wt
y<-mtcars$mpg
model<-lm(y ~ x)
sumCoef<-summary(model)$coefficients
sumCoef[2,1]+c(-1,1)*qt(.975, df=model$df)*sumCoef[2,2]
data(mtcars)
x<-mtcars$wt
y<-mtcars$mpg
model<-lm(y ~ 2*x)
sumCoef<-summary(model)$coefficients
sumCoef[2,1]+c(-1,1)*qt(.975, df=model$df)*sumCoef[2,2]
x<-2*mtcars$wt
y<-mtcars$mpg
model<-lm(y ~ x)
sumCoef<-summary(model)$coefficients
sumCoef[2,1]+c(-1,1)*qt(.975, df=model$df)*sumCoef[2,2]
y<-2*mtcars$mpg
x<-mtcars$wt
model<-lm(y ~ x)
sumCoef<-summary(model)$coefficients
sumCoef[2,1]+c(-1,1)*qt(.975, df=model$df)*sumCoef[2,2]
install_from_swirl("Regression Models")
library(swirl)
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit<-lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic<-fit$coef[1]
ols.slope <- fit$coef[2]
#Here are the vectors of variations or tweaks
sltweak <- c(.01, .02, .03, -.01, -.02, -.03) #one for the slope
ictweak <- c(.1, .2, .3, -.1, -.2, -.3)  #one for the intercept
lhs <- numeric()
rhs <- numeric()
#left side of eqn is the sum of squares of residuals of the tweaked regression line
for (n in 1:6) lhs[n] <- sqe(ols.slope+sltweak[n],ols.ic+ictweak[n])
#right side of eqn is the sum of squares of original residuals + sum of squares of two tweaks
for (n in 1:6) rhs[n] <- sqe(ols.slope,ols.ic) + sum(est(sltweak[n],ictweak[n])^2)
lhs - rhs
all.equal(lhs, rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(ols.ic + galton$child * ols.slop)
varEst <- var(ols.ic + galton$child * ols.slope)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes + varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
fit<-lm(child ~ parent, galton)
sqrt(sum((fit$residuals)^2)/(n-2))
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
deviance(fit)/(n-2)
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child -mu)^2)
sRes <- deviance(fit)
1-sRes/sTot
summary(fit)$r.squared
(cor(galton$child, galton$parent))^2
cor(galton$parent,galton$child)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
View(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
lm(Fertility ~ ., swiss)
all<-lm(Fertility ~ ., swiss)
summary(all)
summary(lm(Fertility ~ Agriculture))
summary(lm(Fertility ~ Agriculture, swiss))
cor
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms()
ec <- swiss$Examination + swiss$Catholic
efit<-lm(Fertility ~ . + ec, swiss)
all$coefficients - efit$coefficients
6
dim(InsectSprays)
head(InsectSprays, 15)
sB
summary(InsectSprays[, 2])
sapply(classes, InsectSprays)
sapply(InsectSprays, classes)
sapply(InsectSprays, class)
fit <- lm(spray ~ count, InsectSprays)
fit <- lm(count ~ spray, InsectSprays)
summary(fit$coef)
summary(fit)$coef
est<-summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray - 1, InsectSprays)
summary(nfit)$coef[,1]
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, C)
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count ~ spray, InsectSprays)
fit2 <- lm(count ~ spray, spray2)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[3]-fit$coef[2])/1.6011
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmF <- lm(hunger[hunger$Sex=="Female", Numeric] ~ hunger[hunger$Sex=="Female", Year])
lmF <- lm(hunger[hunger$Sex=="Female", "Numeric"] ~ hunger[hunger$Sex=="Female", "Year"])
lmM <- lm(hunger[hunger$Sex=="Male", "Numeric"] ~ hunger[hunger$Sex=="Male", "Year"])
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[-1, ])
plot(fitno, which=1)
coef(fit) - coef(fitno)
View(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
View(hatvalues(fit))
sigma
sigma<-sqrt(deviance(fit)/(49))
rstd <- resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
View(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1<-sqrt(deviance(fitno)/(49))
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1] / sqrt(1-hatvalues(fit)[1])
resid(fit)[1] / (sigma1*sqrt(1-hatvalues(fit)[1]))
View(rstudent(fit))
dy <- predict(fitno, out2) - predict(fit, out2)
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
swirl()
rgp1()
rgp2()
View(swiss)
mdl<- lm(Fertility ~ ., swiss)
vif(mdl)
mdl2<- lm(Fertility ~ ., swiss[,-4])
mdl2 <- lm(Fertility ~ . -Examination, swiss)
vif(mdl2)
simbias()
x1c <- simbias()
apply(x1c, 1, mean)
fit1<-lm(Fertility ~ Agriculture, swiss)
fit3<-lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d<-deviance(fit3)/43
n<-(deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
View(ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, family="binomial", data=ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6))
)
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
library("MASS ")
library("MASS")
?shuttle
mdl <- glm(use ~ wind, family="binomial", data=shuttle)
summary(mdl)
exp(mdl$coef)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- seq(0, 5, length = 20)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- seq(0, 5, length = 20)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
mdl <- glm(use ~ wind, family="binomial", data=shuttle)
summary(mdl)
ln(10)
log(10)
swirl()
var(rpois(1000, 50))
nxt()
View(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
confint(mdl, 'date')
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2<-glm(visits~simplystats, offset=log(visits+1), data=hits )
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
10*4/6
10*5/6
10*18/19
(1+1+5/7+4/6)*15 + (8/9)*40
(1+1+5/7+4/6)*15 + (8/9)*40 + 5
(1+1+5/7+5/6)*15 + (8/9)*40 + 5
(1+1+5/7+6/6)*15 + (8/9)*40 + 5
(1+1+5/7+4/6)*15 + (9/10)*40 + 5
(1+1+5/7+4/6)*15 + (12/13)*40 + 5
getwd()
setwd("F:/Cours/Coursera/The Data Science Specialization/Module 09 - Developing Data Products/Project/MyProject")
shiny::runApp()
library(shiny)
shiny::runApp()
shiny::runApp()
data <- readRDS("healthexp.Rds")
data$Region <- as.factor(data$Region)
regions <- levels(data$Region)
regions
choices <- names(regions)
choices
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp( mode = 'showcase')
?shiny::runApp
shiny::runApp( display.mode = 'showcase')
regions <- levels(data$Region)
regions
shiny::runApp()
shiny::runApp()
shiny::runApp( display.mode = 'showcase')
shiny::runApp()
shiny::runApp( display.mode = 'showcase')
rm(choices)
rm(data)
rm(regions)
regions
data
shiny::runApp()
regions
data
rm(data)
rm(regions)
rm(choices)
shiny::runApp()
rm(data)
rm(choices)
shiny::runApp()
rm(choices)
rm(data)
shiny::runApp( display.mode = 'showcase')
rm(data)
rm(choices)
rm(regions)
shiny::runApp( display.mode = 'showcase')
rm(regions)
rm(choices)
rm(data)
xlim
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("gfcanalysis")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
title       : Test title
title       : Test titles
getwd()
cd ..
cwd ..
sewd("..")
sewd("/..")
sewd("../")
getwd()
shiny::runApp()
getwd()
setwd("F:/Cours/Coursera/The Data Science Specialization/Module 09 - Developing Data Products/Project/)
"
)
setwd("F:/Cours/Coursera/The Data Science Specialization/Module 09 - Developing Data Products/Project/")
library(slidify)
author("My_Presentation")
subtitle    : JHU Developping Data Product Coursera Class: Course Project. Life Expectancy vs. Health Expanditure google bubble chart
subtitle    : JHU Developping Data Product Coursera Class. Course Project. Life Expectancy vs. Health Expanditure google bubble chart
mode        : selfcontained # {standalone, draft}
shiny::runApp('F:/Cours/Coursera/The Data Science Specialization/Module 09 - Developing Data Products/Project/MyProject')
shiny::runApp('F:/Cours/Coursera/The Data Science Specialization/Module 09 - Developing Data Products/Project/MyProject')
shiny::runApp('F:/Cours/Coursera/The Data Science Specialization/Module 09 - Developing Data Products/Project/MyProject')
shiny::runApp('F:/Cours/Coursera/The Data Science Specialization/Module 09 - Developing Data Products/Project/MyProject')
shiny::runApp('F:/Cours/Coursera/The Data Science Specialization/Module 09 - Developing Data Products/Project/MyProject')
devtools::install_github("rstudio/shinyapps")
shiny::runApp('F:/Cours/Coursera/The Data Science Specialization/Module 09 - Developing Data Products/Project/MyProject')
shiny::runApp('F:/Cours/Coursera/The Data Science Specialization/Module 09 - Developing Data Products/Project/MyProject')
rm(data)
rm(choices)
rm(regions)
shiny::runApp('F:/Cours/Coursera/The Data Science Specialization/Module 09 - Developing Data Products/Project/MyProject')
shiny::runApp('F:/Cours/Coursera/The Data Science Specialization/Module 09 - Developing Data Products/Project/MyProject')
shiny::runApp('F:/Cours/Coursera/The Data Science Specialization/Module 09 - Developing Data Products/Project/MyProject')
rm(data)
rm(regions)
rm(choices)
shiny::runApp('F:/Cours/Coursera/The Data Science Specialization/Module 09 - Developing Data Products/Project/MyProject')
install.packages("dplyr")
shiny::runApp()
shiny::runApp()
install.packages("dplyr")
install.packages(c("Rcpp", "dplyr"))
shiny::runApp()
install.packages(c("Rcpp", "dplyr"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(knitr)
